# ============================================
# BOOKING MICROSERVICE - Gestion de Reservas
# ============================================
spring.application.name=booking-service
server.port=8082

# ============================================
# EUREKA CLIENT - Service Discovery
# ============================================
eureka.client.service-url.defaultZone=http://localhost:8761/eureka/
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true
eureka.instance.prefer-ip-address=true
eureka.instance.hostname=localhost

# ============================================
# POSTGRESQL - booking_db (Puerto 5434)
# ============================================
spring.datasource.url=jdbc:postgresql://localhost:5434/booking_db
spring.datasource.username=postgres
spring.datasource.password=
spring.datasource.driver-class-name=org.postgresql.Driver
# Hikari Pool
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.connection-timeout=30000
# ============================================
# JPA / HIBERNATE
# ============================================
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.default_schema=booking
spring.jpa.open-in-view=false
# ============================================
# KAFKA - Eventos de Booking
# ============================================
spring.kafka.bootstrap-servers=localhost:9092
# Producer
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.producer.acks=all
spring.kafka.producer.retries=3
spring.kafka.producer.properties.max.in.flight.requests.per.connection=1
spring.kafka.producer.properties.enable.idempotence=true
# Consumer
spring.kafka.consumer.group-id=booking-service
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.trusted.packages=*
spring.kafka.consumer.enable-auto-commit=false
spring.kafka.listener.ack-mode=manual
# ============================================
# REDIS - Idempotencia y Locks Distribuidos
# ============================================
spring.data.redis.host=localhost
spring.data.redis.port=6379
spring.data.redis.timeout=2000ms
spring.data.redis.repositories.enabled=false
# ============================================
# ACTUATOR
# ============================================
management.endpoints.web.exposure.include=health,info,metrics
management.endpoint.health.show-details=always
# ============================================
# LOGGING
# ============================================
logging.level.root=INFO
logging.level.com.balconazo.booking_microservice=DEBUG
logging.level.org.springframework.kafka=WARN
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
