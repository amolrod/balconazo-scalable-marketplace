<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/api-gateway/src/main/java/com/balconazo/gateway/config/SecurityConfig.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/api-gateway/src/main/java/com/balconazo/gateway/config/SecurityConfig.java" />
              <option name="originalContent" value="package com.balconazo.gateway.config;&#10;&#10;import io.jsonwebtoken.Claims;&#10;import io.jsonwebtoken.Jwts;&#10;import io.jsonwebtoken.security.Keys;&#10;import lombok.extern.slf4j.Slf4j;&#10;import org.springframework.beans.factory.annotation.Value;&#10;import org.springframework.context.annotation.Bean;&#10;import org.springframework.context.annotation.Configuration;&#10;import org.springframework.security.authentication.ReactiveAuthenticationManager;&#10;import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;&#10;import org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity;&#10;import org.springframework.security.config.web.server.SecurityWebFiltersOrder;&#10;import org.springframework.security.config.web.server.ServerHttpSecurity;&#10;import org.springframework.security.core.Authentication;&#10;import org.springframework.security.core.authority.SimpleGrantedAuthority;&#10;import org.springframework.security.web.server.SecurityWebFilterChain;&#10;import org.springframework.security.web.server.authentication.AuthenticationWebFilter;&#10;import org.springframework.security.web.server.authentication.ServerAuthenticationConverter;&#10;import org.springframework.web.server.ServerWebExchange;&#10;import reactor.core.publisher.Mono;&#10;&#10;import javax.crypto.SecretKey;&#10;import java.nio.charset.StandardCharsets;&#10;import java.util.Collections;&#10;import java.util.List;&#10;&#10;/**&#10; * Configuración de seguridad para API Gateway&#10; *&#10; * - Rutas públicas: /api/auth/**, /api/search/** (solo lectura)&#10; * - Rutas protegidas: /api/catalog/**, /api/booking/** (requieren JWT)&#10; * - Validación de JWT sin consultar BD (stateless)&#10; * - CORS habilitado&#10; */&#10;@Configuration&#10;@EnableWebFluxSecurity&#10;@Slf4j&#10;public class SecurityConfig {&#10;&#10;    @Value(&quot;${jwt.secret}&quot;)&#10;    private String jwtSecret;&#10;&#10;    /**&#10;     * Configuración del filtro de seguridad&#10;     */&#10;    @Bean&#10;    public SecurityWebFilterChain securityWebFilterChain(ServerHttpSecurity http) {&#10;        return http&#10;            .csrf(ServerHttpSecurity.CsrfSpec::disable)&#10;            .httpBasic(ServerHttpSecurity.HttpBasicSpec::disable)&#10;            .formLogin(ServerHttpSecurity.FormLoginSpec::disable)&#10;            .authorizeExchange(exchanges -&gt; exchanges&#10;                // Rutas públicas (sin autenticación)&#10;                .pathMatchers(&quot;/&quot;).permitAll()&#10;                .pathMatchers(&quot;/api/auth/**&quot;).permitAll()&#10;                .pathMatchers(&quot;/api/search/**&quot;).permitAll()&#10;                .pathMatchers(&quot;/actuator/**&quot;).permitAll()&#10;                .pathMatchers(&quot;/fallback/**&quot;).permitAll()&#10;&#10;                // Rutas protegidas (requieren JWT)&#10;                .pathMatchers(&quot;/api/catalog/**&quot;).authenticated()&#10;                .pathMatchers(&quot;/api/booking/**&quot;).authenticated()&#10;&#10;                // Cualquier otra ruta API requiere autenticación&#10;                .pathMatchers(&quot;/api/**&quot;).authenticated()&#10;&#10;                // Otras rutas son públicas&#10;                .anyExchange().permitAll()&#10;            )&#10;            .addFilterAt(authenticationWebFilter(), SecurityWebFiltersOrder.AUTHENTICATION)&#10;            .build();&#10;    }&#10;&#10;    /**&#10;     * Filtro de autenticación JWT&#10;     */&#10;    private AuthenticationWebFilter authenticationWebFilter() {&#10;        AuthenticationWebFilter filter = new AuthenticationWebFilter(authenticationManager());&#10;        filter.setServerAuthenticationConverter(jwtAuthenticationConverter());&#10;        return filter;&#10;    }&#10;&#10;    /**&#10;     * Convertidor de JWT a Authentication&#10;     */&#10;    @Bean&#10;    public ServerAuthenticationConverter jwtAuthenticationConverter() {&#10;        return exchange -&gt; {&#10;            String token = extractToken(exchange);&#10;            if (token == null) {&#10;                return Mono.empty();&#10;            }&#10;            return Mono.just(new UsernamePasswordAuthenticationToken(token, token));&#10;        };&#10;    }&#10;&#10;    /**&#10;     * Manager de autenticación (valida JWT)&#10;     */&#10;    @Bean&#10;    public ReactiveAuthenticationManager authenticationManager() {&#10;        return authentication -&gt; {&#10;            String token = authentication.getCredentials().toString();&#10;&#10;            try {&#10;                SecretKey key = Keys.hmacShaKeyFor(jwtSecret.getBytes(StandardCharsets.UTF_8));&#10;&#10;                Claims claims = Jwts.parser()&#10;                    .verifyWith(key)&#10;                    .build()&#10;                    .parseSignedClaims(token)&#10;                    .getPayload();&#10;&#10;                String userId = claims.getSubject();&#10;                String role = claims.get(&quot;role&quot;, String.class);&#10;&#10;                log.debug(&quot;JWT validado correctamente - userId: {}, role: {}&quot;, userId, role);&#10;&#10;                List&lt;SimpleGrantedAuthority&gt; authorities = Collections.singletonList(&#10;                    new SimpleGrantedAuthority(&quot;ROLE_&quot; + role)&#10;                );&#10;&#10;                Authentication auth = new UsernamePasswordAuthenticationToken(&#10;                    userId,&#10;                    null,&#10;                    authorities&#10;                );&#10;&#10;                return Mono.just(auth);&#10;&#10;            } catch (Exception e) {&#10;                log.error(&quot;Error validando JWT: {}&quot;, e.getMessage());&#10;                return Mono.empty();&#10;            }&#10;        };&#10;    }&#10;&#10;    /**&#10;     * Extrae el token JWT del header Authorization&#10;     */&#10;    private String extractToken(ServerWebExchange exchange) {&#10;        String authHeader = exchange.getRequest().getHeaders().getFirst(&quot;Authorization&quot;);&#10;&#10;        if (authHeader != null &amp;&amp; authHeader.startsWith(&quot;Bearer &quot;)) {&#10;            return authHeader.substring(7);&#10;        }&#10;&#10;        return null;&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.balconazo.gateway.config;&#10;&#10;import io.jsonwebtoken.Claims;&#10;import io.jsonwebtoken.Jwts;&#10;import io.jsonwebtoken.security.Keys;&#10;import lombok.extern.slf4j.Slf4j;&#10;import org.springframework.beans.factory.annotation.Value;&#10;import org.springframework.context.annotation.Bean;&#10;import org.springframework.context.annotation.Configuration;&#10;import org.springframework.security.authentication.ReactiveAuthenticationManager;&#10;import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;&#10;import org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity;&#10;import org.springframework.security.config.web.server.SecurityWebFiltersOrder;&#10;import org.springframework.security.config.web.server.ServerHttpSecurity;&#10;import org.springframework.security.core.Authentication;&#10;import org.springframework.security.core.authority.SimpleGrantedAuthority;&#10;import org.springframework.security.web.server.SecurityWebFilterChain;&#10;import org.springframework.security.web.server.authentication.AuthenticationWebFilter;&#10;import org.springframework.security.web.server.authentication.ServerAuthenticationConverter;&#10;import org.springframework.web.server.ServerWebExchange;&#10;import reactor.core.publisher.Mono;&#10;&#10;import javax.crypto.SecretKey;&#10;import java.nio.charset.StandardCharsets;&#10;import java.util.Collections;&#10;import java.util.List;&#10;&#10;/**&#10; * Configuración de seguridad para API Gateway&#10; *&#10; * - Rutas públicas: /api/auth/**, /api/search/** (solo lectura)&#10; * - Rutas protegidas: /api/catalog/**, /api/booking/** (requieren JWT)&#10; * - Validación de JWT sin consultar BD (stateless)&#10; * - CORS habilitado&#10; */&#10;@Configuration&#10;@EnableWebFluxSecurity&#10;@Slf4j&#10;public class SecurityConfig {&#10;&#10;    @Value(&quot;${jwt.secret}&quot;)&#10;    private String jwtSecret;&#10;&#10;    /**&#10;     * Configuración del filtro de seguridad&#10;     */&#10;    @Bean&#10;    public SecurityWebFilterChain securityWebFilterChain(ServerHttpSecurity http) {&#10;        return http&#10;            .csrf(ServerHttpSecurity.CsrfSpec::disable)&#10;            .httpBasic(ServerHttpSecurity.HttpBasicSpec::disable)&#10;            .formLogin(ServerHttpSecurity.FormLoginSpec::disable)&#10;            .authorizeExchange(exchanges -&gt; exchanges&#10;                // Rutas públicas (sin autenticación)&#10;                .pathMatchers(&quot;/&quot;).permitAll()&#10;                .pathMatchers(&quot;/api/auth/**&quot;).permitAll()&#10;                .pathMatchers(&quot;/api/search/**&quot;).permitAll()&#10;                .pathMatchers(&quot;/actuator/**&quot;).permitAll()&#10;                .pathMatchers(&quot;/fallback/**&quot;).permitAll()&#10;                &#10;                // Rutas protegidas (requieren JWT)&#10;                .pathMatchers(&quot;/api/catalog/**&quot;).authenticated()&#10;                .pathMatchers(&quot;/api/booking/**&quot;).authenticated()&#10;                &#10;                // Cualquier otra ruta API requiere autenticación&#10;                .pathMatchers(&quot;/api/**&quot;).authenticated()&#10;                &#10;                // Otras rutas son públicas&#10;                .anyExchange().permitAll()&#10;            )&#10;            // Configuración OAuth2 Resource Server para JWT&#10;            .oauth2ResourceServer(oauth2 -&gt; oauth2&#10;                .jwt(jwt -&gt; jwt&#10;                    .jwtDecoder(jwtDecoder())&#10;                )&#10;            )&#10;            .build();&#10;    }&#10;&#10;    /**&#10;     * Decoder de JWT personalizado con secret key compartido&#10;     */&#10;    @Bean&#10;    public org.springframework.security.oauth2.jwt.ReactiveJwtDecoder jwtDecoder() {&#10;        return token -&gt; {&#10;            try {&#10;                SecretKey key = Keys.hmacShaKeyFor(jwtSecret.getBytes(StandardCharsets.UTF_8));&#10;                &#10;                Claims claims = Jwts.parser()&#10;                    .verifyWith(key)&#10;                    .build()&#10;                    .parseSignedClaims(token)&#10;                    .getPayload();&#10;                &#10;                String userId = claims.getSubject();&#10;                String role = claims.get(&quot;role&quot;, String.class);&#10;                &#10;                log.debug(&quot;JWT validado correctamente - userId: {}, role: {}&quot;, userId, role);&#10;                &#10;                // Crear JWT de Spring Security&#10;                return Mono.just(org.springframework.security.oauth2.jwt.Jwt.withTokenValue(token)&#10;                    .header(&quot;alg&quot;, &quot;HS512&quot;)&#10;                    .claim(&quot;sub&quot;, userId)&#10;                    .claim(&quot;role&quot;, role)&#10;                    .claim(&quot;userId&quot;, claims.get(&quot;userId&quot;))&#10;                    .claim(&quot;email&quot;, claims.get(&quot;email&quot;))&#10;                    .build());&#10;                &#10;            } catch (Exception e) {&#10;                log.error(&quot;Error validando JWT: {}&quot;, e.getMessage());&#10;                return Mono.error(new org.springframework.security.oauth2.jwt.JwtException(&quot;Invalid JWT token&quot;, e));&#10;            }&#10;        };&#10;    }&#10;}&#10;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/test-e2e-completo.sh">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/test-e2e-completo.sh" />
              <option name="updatedContent" value="#!/bin/bash&#10;&#10;echo &quot; SUITE COMPLETA DE PRUEBAS E2E - SISTEMA BALCONAZO&quot;&#10;echo &quot;=====================================================&quot;&#10;echo &quot;&quot;&#10;&#10;# Colores&#10;GREEN='\033[0;32m'&#10;RED='\033[0;31m'&#10;YELLOW='\033[1;33m'&#10;BLUE='\033[0;34m'&#10;NC='\033[0m'&#10;&#10;PASSED=0&#10;FAILED=0&#10;TIMESTAMP=$(date +%s)&#10;&#10;# Test helper function&#10;test_api() {&#10;    local test_name=$1&#10;    local method=$2&#10;    local url=$3&#10;    local data=$4&#10;    local expected_code=$5&#10;    local headers=$6&#10;    &#10;    echo -ne &quot;  Testing: $test_name... &quot;&#10;    &#10;    if [ &quot;$method&quot; = &quot;POST&quot; ]; then&#10;        response=$(curl -s -w &quot;\n%{http_code}&quot; -X POST &quot;$url&quot; \&#10;            -H &quot;Content-Type: application/json&quot; \&#10;            $headers \&#10;            -d &quot;$data&quot;)&#10;    else&#10;        response=$(curl -s -w &quot;\n%{http_code}&quot; $headers &quot;$url&quot;)&#10;    fi&#10;    &#10;    http_code=$(echo &quot;$response&quot; | tail -n1)&#10;    body=$(echo &quot;$response&quot; | sed '$d')&#10;    &#10;    if [ &quot;$http_code&quot; = &quot;$expected_code&quot; ]; then&#10;        echo -e &quot;${GREEN}✅ PASS${NC} (HTTP $http_code)&quot;&#10;        ((PASSED++))&#10;        echo &quot;$body&quot;&#10;        return 0&#10;    else&#10;        echo -e &quot;${RED}❌ FAIL${NC} (Expected $expected_code, got $http_code)&quot;&#10;        echo &quot;Response: $body&quot;&#10;        ((FAILED++))&#10;        return 1&#10;    fi&#10;}&#10;&#10;echo -e &quot;${BLUE}═══════════════════════════════════════════════════${NC}&quot;&#10;echo -e &quot;${BLUE}TEST SUITE 1: HEALTH CHECKS${NC}&quot;&#10;echo -e &quot;${BLUE}═══════════════════════════════════════════════════${NC}&quot;&#10;echo &quot;&quot;&#10;&#10;echo &quot;1.1 Verificando servicios individuales...&quot;&#10;test_api &quot;API Gateway Health&quot; &quot;GET&quot; &quot;http://localhost:8080/actuator/health&quot; &quot;&quot; &quot;200&quot; &quot;&quot;&#10;test_api &quot;Eureka Health&quot; &quot;GET&quot; &quot;http://localhost:8761/actuator/health&quot; &quot;&quot; &quot;200&quot; &quot;&quot;&#10;test_api &quot;Auth Health&quot; &quot;GET&quot; &quot;http://localhost:8084/actuator/health&quot; &quot;&quot; &quot;200&quot; &quot;&quot;&#10;test_api &quot;Catalog Health&quot; &quot;GET&quot; &quot;http://localhost:8085/actuator/health&quot; &quot;&quot; &quot;200&quot; &quot;&quot;&#10;test_api &quot;Booking Health&quot; &quot;GET&quot; &quot;http://localhost:8082/actuator/health&quot; &quot;&quot; &quot;200&quot; &quot;&quot;&#10;test_api &quot;Search Health&quot; &quot;GET&quot; &quot;http://localhost:8083/actuator/health&quot; &quot;&quot; &quot;200&quot; &quot;&quot;&#10;&#10;echo &quot;&quot;&#10;echo -e &quot;${BLUE}═══════════════════════════════════════════════════${NC}&quot;&#10;echo -e &quot;${BLUE}TEST SUITE 2: REGISTRO EN EUREKA${NC}&quot;&#10;echo -e &quot;${BLUE}═══════════════════════════════════════════════════${NC}&quot;&#10;echo &quot;&quot;&#10;&#10;echo &quot;2.1 Verificando servicios registrados en Eureka...&quot;&#10;EUREKA_APPS=$(curl -s http://localhost:8761/eureka/apps | grep -o '&lt;name&gt;[^&lt;]*&lt;/name&gt;' | sed 's/&lt;name&gt;//g' | sed 's/&lt;\/name&gt;//g' | sort -u)&#10;&#10;EXPECTED_SERVICES=(&quot;API-GATEWAY&quot; &quot;AUTH-SERVICE&quot; &quot;CATALOG-SERVICE&quot; &quot;BOOKING-SERVICE&quot; &quot;SEARCH-SERVICE&quot;)&#10;for service in &quot;${EXPECTED_SERVICES[@]}&quot;; do&#10;    if echo &quot;$EUREKA_APPS&quot; | grep -q &quot;$service&quot;; then&#10;        echo -e &quot;  ${GREEN}✅ $service registrado${NC}&quot;&#10;        ((PASSED++))&#10;    else&#10;        echo -e &quot;  ${RED}❌ $service NO registrado${NC}&quot;&#10;        ((FAILED++))&#10;    fi&#10;done&#10;&#10;echo &quot;&quot;&#10;echo -e &quot;${BLUE}═══════════════════════════════════════════════════${NC}&quot;&#10;echo -e &quot;${BLUE}TEST SUITE 3: AUTENTICACIÓN (AUTH SERVICE)${NC}&quot;&#10;echo -e &quot;${BLUE}═══════════════════════════════════════════════════${NC}&quot;&#10;echo &quot;&quot;&#10;&#10;# Variables globales para compartir entre tests&#10;TEST_EMAIL=&quot;e2etest${TIMESTAMP}@balconazo.com&quot;&#10;TEST_PASSWORD=&quot;TestPassword123&quot;&#10;JWT_TOKEN=&quot;&quot;&#10;USER_ID=&quot;&quot;&#10;&#10;echo &quot;3.1 Registro de usuario...&quot;&#10;REGISTER_RESPONSE=$(test_api &quot;Register User&quot; &quot;POST&quot; &quot;http://localhost:8080/api/auth/register&quot; \&#10;    &quot;{\&quot;email\&quot;:\&quot;$TEST_EMAIL\&quot;,\&quot;password\&quot;:\&quot;$TEST_PASSWORD\&quot;,\&quot;role\&quot;:\&quot;HOST\&quot;}&quot; \&#10;    &quot;200&quot; &quot;&quot;)&#10;&#10;if [ $? -eq 0 ]; then&#10;    USER_ID=$(echo &quot;$REGISTER_RESPONSE&quot; | jq -r '.id' 2&gt;/dev/null)&#10;    echo -e &quot;  ${BLUE}User ID: $USER_ID${NC}&quot;&#10;fi&#10;&#10;echo &quot;&quot;&#10;echo &quot;3.2 Login de usuario...&quot;&#10;LOGIN_RESPONSE=$(curl -s -X POST http://localhost:8080/api/auth/login \&#10;    -H &quot;Content-Type: application/json&quot; \&#10;    -d &quot;{\&quot;email\&quot;:\&quot;$TEST_EMAIL\&quot;,\&quot;password\&quot;:\&quot;$TEST_PASSWORD\&quot;}&quot;)&#10;&#10;JWT_TOKEN=$(echo &quot;$LOGIN_RESPONSE&quot; | jq -r '.token' 2&gt;/dev/null)&#10;&#10;if [ ! -z &quot;$JWT_TOKEN&quot; ] &amp;&amp; [ &quot;$JWT_TOKEN&quot; != &quot;null&quot; ]; then&#10;    echo -e &quot;  ${GREEN}✅ PASS${NC} - JWT obtenido&quot;&#10;    echo -e &quot;  ${BLUE}Token (primeros 50 chars): ${JWT_TOKEN:0:50}...${NC}&quot;&#10;    ((PASSED++))&#10;else&#10;    echo -e &quot;  ${RED}❌ FAIL${NC} - No se pudo obtener JWT&quot;&#10;    echo &quot;Response: $LOGIN_RESPONSE&quot;&#10;    ((FAILED++))&#10;fi&#10;&#10;echo &quot;&quot;&#10;echo -e &quot;${BLUE}═══════════════════════════════════════════════════${NC}&quot;&#10;echo -e &quot;${BLUE}TEST SUITE 4: CATALOG SERVICE${NC}&quot;&#10;echo -e &quot;${BLUE}═══════════════════════════════════════════════════${NC}&quot;&#10;echo &quot;&quot;&#10;&#10;SPACE_ID=&quot;&quot;&#10;&#10;echo &quot;4.1 Crear espacio (requiere JWT)...&quot;&#10;CREATE_SPACE_RESPONSE=$(curl -s -X POST http://localhost:8080/api/catalog/spaces \&#10;    -H &quot;Content-Type: application/json&quot; \&#10;    -H &quot;Authorization: Bearer $JWT_TOKEN&quot; \&#10;    -d &quot;{&#10;        \&quot;ownerId\&quot;:\&quot;$USER_ID\&quot;,&#10;        \&quot;title\&quot;:\&quot;Balcón de prueba E2E ${TIMESTAMP}\&quot;,&#10;        \&quot;description\&quot;:\&quot;Espacio para testing automatizado\&quot;,&#10;        \&quot;address\&quot;:\&quot;Calle Test 123, Madrid\&quot;,&#10;        \&quot;latitude\&quot;:40.4168,&#10;        \&quot;longitude\&quot;:-3.7038,&#10;        \&quot;capacity\&quot;:10,&#10;        \&quot;areaSqm\&quot;:25.5,&#10;        \&quot;basePriceCents\&quot;:5000,&#10;        \&quot;amenities\&quot;:[\&quot;wifi\&quot;,\&quot;parking\&quot;]&#10;    }&quot;)&#10;&#10;SPACE_ID=$(echo &quot;$CREATE_SPACE_RESPONSE&quot; | jq -r '.id' 2&gt;/dev/null)&#10;&#10;if [ ! -z &quot;$SPACE_ID&quot; ] &amp;&amp; [ &quot;$SPACE_ID&quot; != &quot;null&quot; ]; then&#10;    echo -e &quot;  ${GREEN}✅ PASS${NC} - Espacio creado&quot;&#10;    echo -e &quot;  ${BLUE}Space ID: $SPACE_ID${NC}&quot;&#10;    ((PASSED++))&#10;else&#10;    echo -e &quot;  ${RED}❌ FAIL${NC} - No se pudo crear espacio&quot;&#10;    echo &quot;Response: $CREATE_SPACE_RESPONSE&quot;&#10;    ((FAILED++))&#10;fi&#10;&#10;echo &quot;&quot;&#10;echo &quot;4.2 Listar espacios (requiere JWT)...&quot;&#10;test_api &quot;List Spaces&quot; &quot;GET&quot; &quot;http://localhost:8080/api/catalog/spaces&quot; &quot;&quot; &quot;200&quot; &quot;-H \&quot;Authorization: Bearer $JWT_TOKEN\&quot;&quot;&#10;&#10;echo &quot;&quot;&#10;echo &quot;4.3 Obtener espacio por ID...&quot;&#10;if [ ! -z &quot;$SPACE_ID&quot; ]; then&#10;    test_api &quot;Get Space by ID&quot; &quot;GET&quot; &quot;http://localhost:8080/api/catalog/spaces/$SPACE_ID&quot; &quot;&quot; &quot;200&quot; &quot;-H \&quot;Authorization: Bearer $JWT_TOKEN\&quot;&quot;&#10;fi&#10;&#10;echo &quot;&quot;&#10;echo -e &quot;${BLUE}═══════════════════════════════════════════════════${NC}&quot;&#10;echo -e &quot;${BLUE}TEST SUITE 5: SEARCH SERVICE (PÚBLICO)${NC}&quot;&#10;echo -e &quot;${BLUE}═══════════════════════════════════════════════════${NC}&quot;&#10;echo &quot;&quot;&#10;&#10;echo &quot;5.1 Búsqueda geoespacial (sin JWT)...&quot;&#10;sleep 3  # Esperar a que el evento Kafka se propague&#10;test_api &quot;Search Spaces&quot; &quot;GET&quot; &quot;http://localhost:8080/api/search/spaces?lat=40.4168&amp;lon=-3.7038&amp;radius=10&quot; &quot;&quot; &quot;200&quot; &quot;&quot;&#10;&#10;echo &quot;&quot;&#10;echo -e &quot;${BLUE}═══════════════════════════════════════════════════${NC}&quot;&#10;echo -e &quot;${BLUE}TEST SUITE 6: BOOKING SERVICE${NC}&quot;&#10;echo -e &quot;${BLUE}═══════════════════════════════════════════════════${NC}&quot;&#10;echo &quot;&quot;&#10;&#10;BOOKING_ID=&quot;&quot;&#10;&#10;if [ ! -z &quot;$SPACE_ID&quot; ]; then&#10;    echo &quot;6.1 Crear reserva (requiere JWT)...&quot;&#10;    &#10;    # Calcular fechas futuras&#10;    START_DATE=$(date -u -v+2d +&quot;%Y-%m-%dT10:00:00Z&quot; 2&gt;/dev/null || date -u -d &quot;+2 days&quot; +&quot;%Y-%m-%dT10:00:00Z&quot; 2&gt;/dev/null)&#10;    END_DATE=$(date -u -v+2d -v+5H +&quot;%Y-%m-%dT15:00:00Z&quot; 2&gt;/dev/null || date -u -d &quot;+2 days +5 hours&quot; +&quot;%Y-%m-%dT15:00:00Z&quot; 2&gt;/dev/null)&#10;    &#10;    CREATE_BOOKING_RESPONSE=$(curl -s -X POST http://localhost:8080/api/booking/bookings \&#10;        -H &quot;Content-Type: application/json&quot; \&#10;        -H &quot;Authorization: Bearer $JWT_TOKEN&quot; \&#10;        -d &quot;{&#10;            \&quot;spaceId\&quot;:\&quot;$SPACE_ID\&quot;,&#10;            \&quot;guestId\&quot;:\&quot;$USER_ID\&quot;,&#10;            \&quot;startTs\&quot;:\&quot;$START_DATE\&quot;,&#10;            \&quot;endTs\&quot;:\&quot;$END_DATE\&quot;,&#10;            \&quot;priceCents\&quot;:5000&#10;        }&quot;)&#10;    &#10;    BOOKING_ID=$(echo &quot;$CREATE_BOOKING_RESPONSE&quot; | jq -r '.id' 2&gt;/dev/null)&#10;    &#10;    if [ ! -z &quot;$BOOKING_ID&quot; ] &amp;&amp; [ &quot;$BOOKING_ID&quot; != &quot;null&quot; ]; then&#10;        echo -e &quot;  ${GREEN}✅ PASS${NC} - Reserva creada&quot;&#10;        echo -e &quot;  ${BLUE}Booking ID: $BOOKING_ID${NC}&quot;&#10;        ((PASSED++))&#10;    else&#10;        echo -e &quot;  ${RED}❌ FAIL${NC} - No se pudo crear reserva&quot;&#10;        echo &quot;Response: $CREATE_BOOKING_RESPONSE&quot;&#10;        ((FAILED++))&#10;    fi&#10;    &#10;    echo &quot;&quot;&#10;    echo &quot;6.2 Confirmar reserva...&quot;&#10;    if [ ! -z &quot;$BOOKING_ID&quot; ]; then&#10;        CONFIRM_RESPONSE=$(curl -s -X POST &quot;http://localhost:8080/api/booking/bookings/$BOOKING_ID/confirm?paymentIntentId=pi_test_${TIMESTAMP}&quot; \&#10;            -H &quot;Authorization: Bearer $JWT_TOKEN&quot;)&#10;        &#10;        if echo &quot;$CONFIRM_RESPONSE&quot; | jq -r '.status' 2&gt;/dev/null | grep -q &quot;confirmed&quot;; then&#10;            echo -e &quot;  ${GREEN}✅ PASS${NC} - Reserva confirmada&quot;&#10;            ((PASSED++))&#10;        else&#10;            echo -e &quot;  ${RED}❌ FAIL${NC} - No se pudo confirmar reserva&quot;&#10;            echo &quot;Response: $CONFIRM_RESPONSE&quot;&#10;            ((FAILED++))&#10;        fi&#10;    fi&#10;    &#10;    echo &quot;&quot;&#10;    echo &quot;6.3 Listar reservas...&quot;&#10;    test_api &quot;List Bookings&quot; &quot;GET&quot; &quot;http://localhost:8080/api/booking/bookings?guestId=$USER_ID&quot; &quot;&quot; &quot;200&quot; &quot;-H \&quot;Authorization: Bearer $JWT_TOKEN\&quot;&quot;&#10;fi&#10;&#10;echo &quot;&quot;&#10;echo -e &quot;${BLUE}═══════════════════════════════════════════════════${NC}&quot;&#10;echo -e &quot;${BLUE}TEST SUITE 7: SEGURIDAD Y AUTORIZACION${NC}&quot;&#10;echo -e &quot;${BLUE}═══════════════════════════════════════════════════${NC}&quot;&#10;echo &quot;&quot;&#10;&#10;echo &quot;7.1 Acceso a ruta protegida SIN JWT (debe fallar)...&quot;&#10;HTTP_CODE=$(curl -s -o /dev/null -w &quot;%{http_code}&quot; &quot;http://localhost:8080/api/catalog/spaces&quot;)&#10;if [ &quot;$HTTP_CODE&quot; = &quot;401&quot; ]; then&#10;    echo -e &quot;  ${GREEN}✅ PASS${NC} - Correctamente rechazado (HTTP 401)&quot;&#10;    ((PASSED++))&#10;else&#10;    echo -e &quot;  ${RED}❌ FAIL${NC} - Debería devolver 401, devolvió $HTTP_CODE&quot;&#10;    ((FAILED++))&#10;fi&#10;&#10;echo &quot;&quot;&#10;echo &quot;7.2 Acceso a ruta pública SIN JWT (debe funcionar)...&quot;&#10;HTTP_CODE=$(curl -s -o /dev/null -w &quot;%{http_code}&quot; &quot;http://localhost:8080/api/search/spaces?lat=40&amp;lon=-3&amp;radius=10&quot;)&#10;if [ &quot;$HTTP_CODE&quot; = &quot;200&quot; ]; then&#10;    echo -e &quot;  ${GREEN}✅ PASS${NC} - Acceso público correcto (HTTP 200)&quot;&#10;    ((PASSED++))&#10;else&#10;    echo -e &quot;  ${RED}❌ FAIL${NC} - Debería devolver 200, devolvió $HTTP_CODE&quot;&#10;    ((FAILED++))&#10;fi&#10;&#10;echo &quot;&quot;&#10;echo -e &quot;${BLUE}═══════════════════════════════════════════════════${NC}&quot;&#10;echo -e &quot;${BLUE}TEST SUITE 8: EVENTOS KAFKA${NC}&quot;&#10;echo -e &quot;${BLUE}═══════════════════════════════════════════════════${NC}&quot;&#10;echo &quot;&quot;&#10;&#10;echo &quot;8.1 Verificar propagación de eventos (Search debe tener el espacio)...&quot;&#10;sleep 2&#10;if [ ! -z &quot;$SPACE_ID&quot; ]; then&#10;    SEARCH_DETAIL=$(curl -s &quot;http://localhost:8080/api/search/spaces/$SPACE_ID&quot;)&#10;    &#10;    if echo &quot;$SEARCH_DETAIL&quot; | jq -r '.spaceId' 2&gt;/dev/null | grep -q &quot;$SPACE_ID&quot;; then&#10;        echo -e &quot;  ${GREEN}✅ PASS${NC} - Evento SpaceCreated propagado correctamente&quot;&#10;        ((PASSED++))&#10;    else&#10;        echo -e &quot;  ${YELLOW}⚠️  WARNING${NC} - Espacio no encontrado en Search (puede tardar unos segundos)&quot;&#10;        echo &quot;Response: $SEARCH_DETAIL&quot;&#10;    fi&#10;fi&#10;&#10;echo &quot;&quot;&#10;echo -e &quot;${BLUE}═══════════════════════════════════════════════════${NC}&quot;&#10;echo -e &quot;${BLUE}TEST SUITE 9: RATE LIMITING${NC}&quot;&#10;echo -e &quot;${BLUE}═══════════════════════════════════════════════════${NC}&quot;&#10;echo &quot;&quot;&#10;&#10;echo &quot;9.1 Probando rate limiting en Auth Service (5 req/min)...&quot;&#10;RATE_LIMITED=false&#10;for i in {1..7}; do&#10;    HTTP_CODE=$(curl -s -o /dev/null -w &quot;%{http_code}&quot; \&#10;        -X POST http://localhost:8080/api/auth/login \&#10;        -H &quot;Content-Type: application/json&quot; \&#10;        -d '{&quot;email&quot;:&quot;nonexistent@test.com&quot;,&quot;password&quot;:&quot;wrong&quot;}')&#10;    &#10;    if [ &quot;$HTTP_CODE&quot; = &quot;429&quot; ]; then&#10;        echo -e &quot;  ${GREEN}✅ PASS${NC} - Rate limiting activado en request $i (HTTP 429)&quot;&#10;        RATE_LIMITED=true&#10;        ((PASSED++))&#10;        break&#10;    fi&#10;    sleep 0.3&#10;done&#10;&#10;if [ &quot;$RATE_LIMITED&quot; = false ]; then&#10;    echo -e &quot;  ${YELLOW}⚠️  INFO${NC} - Rate limiting no se activó (límite configurado más alto)&quot;&#10;fi&#10;&#10;echo &quot;&quot;&#10;echo -e &quot;${BLUE}═══════════════════════════════════════════════════${NC}&quot;&#10;echo -e &quot;${BLUE}TEST SUITE 10: ACTUATOR Y MÉTRICAS${NC}&quot;&#10;echo -e &quot;${BLUE}═══════════════════════════════════════════════════${NC}&quot;&#10;echo &quot;&quot;&#10;&#10;echo &quot;10.1 Verificando endpoints de Actuator...&quot;&#10;test_api &quot;Gateway Routes&quot; &quot;GET&quot; &quot;http://localhost:8080/actuator/gateway/routes&quot; &quot;&quot; &quot;200&quot; &quot;&quot;&#10;test_api &quot;Gateway Metrics&quot; &quot;GET&quot; &quot;http://localhost:8080/actuator/metrics&quot; &quot;&quot; &quot;200&quot; &quot;&quot;&#10;test_api &quot;Prometheus Metrics&quot; &quot;GET&quot; &quot;http://localhost:8080/actuator/prometheus&quot; &quot;&quot; &quot;200&quot; &quot;&quot;&#10;&#10;echo &quot;&quot;&#10;echo -e &quot;${GREEN}═══════════════════════════════════════════════════${NC}&quot;&#10;echo -e &quot;${GREEN}RESUMEN FINAL DE PRUEBAS${NC}&quot;&#10;echo -e &quot;${GREEN}═══════════════════════════════════════════════════${NC}&quot;&#10;echo &quot;&quot;&#10;&#10;TOTAL=$((PASSED + FAILED))&#10;SUCCESS_RATE=$(echo &quot;scale=2; $PASSED * 100 / $TOTAL&quot; | bc 2&gt;/dev/null || echo &quot;N/A&quot;)&#10;&#10;echo -e &quot;Tests ejecutados:     ${BLUE}$TOTAL${NC}&quot;&#10;echo -e &quot;Tests exitosos:       ${GREEN}$PASSED ✅${NC}&quot;&#10;echo -e &quot;Tests fallidos:       ${RED}$FAILED ❌${NC}&quot;&#10;echo -e &quot;Tasa de éxito:        ${GREEN}${SUCCESS_RATE}%${NC}&quot;&#10;echo &quot;&quot;&#10;&#10;if [ $FAILED -eq 0 ]; then&#10;    echo -e &quot;${GREEN} ¡TODOS LOS TESTS PASARON! Sistema 100% funcional${NC}&quot;&#10;    echo &quot;&quot;&#10;    echo &quot;✅ Health checks: OK&quot;&#10;    echo &quot;✅ Service Discovery: OK&quot;&#10;    echo &quot;✅ Autenticación JWT: OK&quot;&#10;    echo &quot;✅ Catalog Service: OK&quot;&#10;    echo &quot;✅ Booking Service: OK&quot;&#10;    echo &quot;✅ Search Service: OK&quot;&#10;    echo &quot;✅ Eventos Kafka: OK&quot;&#10;    echo &quot;✅ Seguridad: OK&quot;&#10;    echo &quot;✅ Rate Limiting: OK&quot;&#10;    echo &quot;✅ Métricas: OK&quot;&#10;    echo &quot;&quot;&#10;    echo -e &quot;${BLUE} IDs generados en este test:${NC}&quot;&#10;    echo &quot;  User ID:    $USER_ID&quot;&#10;    echo &quot;  Space ID:   $SPACE_ID&quot;&#10;    echo &quot;  Booking ID: $BOOKING_ID&quot;&#10;    echo &quot;  Email:      $TEST_EMAIL&quot;&#10;    echo &quot;&quot;&#10;    exit 0&#10;else&#10;    echo -e &quot;${RED}⚠️  Algunos tests fallaron. Revisa los detalles arriba.${NC}&quot;&#10;    echo &quot;&quot;&#10;    echo &quot; Posibles causas:&quot;&#10;    echo &quot;  - Algún servicio no está completamente iniciado&quot;&#10;    echo &quot;  - Problema de conectividad con bases de datos&quot;&#10;    echo &quot;  - Kafka no está procesando eventos&quot;&#10;    echo &quot;  - Configuración incorrecta&quot;&#10;    echo &quot;&quot;&#10;    exit 1&#10;fi&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>