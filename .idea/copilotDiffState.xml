<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/README.md" />
              <option name="updatedContent" value="#  BalconazoApp - Sistema de Alquiler de Espacios&#10;&#10;[![Estado](https://img.shields.io/badge/Estado-Producción%20Ready-success)](https://github.com)&#10;[![Tests](https://img.shields.io/badge/Tests-27%2F27%20Passing-brightgreen)](https://github.com)&#10;[![Cobertura](https://img.shields.io/badge/Cobertura-100%25-brightgreen)](https://github.com)&#10;[![Java](https://img.shields.io/badge/Java-21-orange)](https://www.oracle.com/java/)&#10;[![Spring Boot](https://img.shields.io/badge/Spring%20Boot-3.5.7-green)](https://spring.io/projects/spring-boot)&#10;&#10;**BalconazoApp** es una plataforma de alquiler de espacios (balcones, terrazas, patios) construida con arquitectura de microservicios. El sistema permite a propietarios publicar sus espacios y a usuarios reservarlos para eventos.&#10;&#10;##  Tabla de Contenidos&#10;&#10;- [Características Principales](#características-principales)&#10;- [Arquitectura](#arquitectura)&#10;- [Tecnologías](#tecnologías)&#10;- [Inicio Rápido](#inicio-rápido)&#10;- [Documentación](#documentación)&#10;- [Estado del Proyecto](#estado-del-proyecto)&#10;- [Contribuir](#contribuir)&#10;&#10;## ✨ Características Principales&#10;&#10;### Funcionalidades Implementadas ✅&#10;&#10;- **Autenticación JWT** - Registro, login y gestión de sesiones seguras&#10;- **Gestión de Espacios** - CRUD completo con validación de propietarios&#10;- **Sistema de Reservas** - Crear, confirmar y gestionar reservas con pagos&#10;- **Búsqueda Geoespacial** - Búsqueda por coordenadas usando PostGIS&#10;- **Eventos de Dominio** - Comunicación asíncrona entre servicios via Kafka&#10;- **API Gateway** - Punto de entrada único con routing inteligente&#10;- **Service Discovery** - Registro y descubrimiento dinámico con Eureka&#10;- **Métricas y Observabilidad** - Actuator, Prometheus y health checks&#10;- **Caché Redis** - Optimización de consultas frecuentes&#10;- **Arquitectura Event-Driven** - Propagación de eventos entre servicios&#10;&#10;## ️ Arquitectura&#10;&#10;### Microservicios&#10;&#10;```&#10;┌─────────────────────────────────────────────────────────┐&#10;│                     API Gateway (8080)                   │&#10;│            Spring Cloud Gateway + Circuit Breaker         │&#10;└──────────────────────┬──────────────────────────────────┘&#10;                       │&#10;        ┌──────────────┼──────────────┐&#10;        │              │              │&#10;┌───────▼──────┐ ┌────▼─────┐ ┌─────▼──────┐&#10;│ Auth Service │ │ Catalog  │ │  Booking   │&#10;│   (8084)     │ │ Service  │ │  Service   │&#10;│   MySQL      │ │ (8085)   │ │  (8082)    │&#10;└──────────────┘ │PostgreSQL│ │ PostgreSQL │&#10;                 └────┬─────┘ └─────┬──────┘&#10;                      │             │&#10;                 ┌────▼─────────────▼────┐&#10;                 │    Kafka (29092)       │&#10;                 │  Event Bus             │&#10;                 └────┬───────────────────┘&#10;                      │&#10;                 ┌────▼─────┐&#10;                 │  Search  │&#10;                 │ Service  │&#10;                 │  (8083)  │&#10;                 │PostgreSQL│&#10;                 │+ PostGIS │&#10;                 └──────────┘&#10;&#10;┌─────────────────────────────────────────────┐&#10;│     Eureka Server (8761)                     │&#10;│     Service Discovery                        │&#10;└─────────────────────────────────────────────┘&#10;&#10;┌─────────────────────────────────────────────┐&#10;│  Infrastructure                              │&#10;│  - Redis (6379) - Cache                      │&#10;│  - MySQL (3307) - Auth DB                    │&#10;│  - PostgreSQL (5432) - Catalog DB            │&#10;│  - PostgreSQL (5433) - Booking DB            │&#10;│  - PostgreSQL (5434) - Search DB             │&#10;│  - Kafka (29092) - Message Broker            │&#10;└─────────────────────────────────────────────┘&#10;```&#10;&#10;### Flujo de Eventos&#10;&#10;```&#10;1. Usuario crea espacio → Catalog Service&#10;2. Catalog publica SpaceCreatedEvent → Kafka&#10;3. Search Service consume evento → Indexa en PostGIS&#10;4. Usuario busca espacios cercanos → Search Service&#10;5. Usuario reserva espacio → Booking Service&#10;6. Booking publica BookingCreatedEvent → Kafka&#10;7. Search actualiza disponibilidad → PostGIS&#10;```&#10;&#10;## ️ Tecnologías&#10;&#10;### Backend&#10;- **Java 21** - Lenguaje principal&#10;- **Spring Boot 3.5.7** - Framework de aplicaciones&#10;- **Spring Cloud 2025.0.0** - Microservicios&#10;- **Spring Security** - Autenticación y autorización&#10;- **JWT (jjwt 0.12.6)** - Tokens seguros&#10;&#10;### Bases de Datos&#10;- **MySQL 8.0** - Auth Service&#10;- **PostgreSQL 16** - Catalog, Booking, Search&#10;- **PostGIS** - Extensión geoespacial&#10;- **Redis 7.x** - Caché distribuido&#10;&#10;### Mensajería&#10;- **Apache Kafka 3.9** - Event streaming&#10;- **Spring Kafka** - Integración&#10;&#10;### Infraestructura&#10;- **Docker &amp; Docker Compose** - Contenedores&#10;- **Eureka Server** - Service discovery&#10;- **Spring Cloud Gateway** - API Gateway&#10;- **Actuator + Prometheus** - Métricas&#10;&#10;### Testing&#10;- **JUnit 5** - Tests unitarios&#10;- **Testcontainers** - Tests de integración&#10;- **Shell Scripts** - Tests E2E&#10;&#10;##  Inicio Rápido&#10;&#10;### Prerequisitos&#10;&#10;```bash&#10;# Versiones requeridas&#10;java --version    # Java 21+&#10;mvn --version     # Maven 3.8+&#10;docker --version  # Docker 24+&#10;docker-compose --version  # Docker Compose 2.0+&#10;```&#10;&#10;### Instalación&#10;&#10;```bash&#10;# 1. Clonar repositorio&#10;git clone https://github.com/tu-usuario/BalconazoApp.git&#10;cd BalconazoApp&#10;&#10;# 2. Iniciar infraestructura (bases de datos, Kafka, Redis)&#10;./start-infrastructure.sh&#10;&#10;# 3. Iniciar Eureka Server&#10;./start-eureka.sh&#10;&#10;# 4. Compilar todos los servicios&#10;./recompile-all.sh&#10;&#10;# 5. Iniciar sistema completo&#10;./start-system-improved.sh&#10;&#10;# 6. Verificar estado&#10;./verify-system.sh&#10;```&#10;&#10;### Verificación Rápida&#10;&#10;```bash&#10;# Health checks&#10;curl http://localhost:8080/actuator/health  # API Gateway&#10;curl http://localhost:8761/actuator/health  # Eureka&#10;curl http://localhost:8084/actuator/health  # Auth&#10;curl http://localhost:8085/actuator/health  # Catalog&#10;curl http://localhost:8082/actuator/health  # Booking&#10;curl http://localhost:8083/actuator/health  # Search&#10;&#10;# Eureka Dashboard&#10;open http://localhost:8761&#10;```&#10;&#10;### Tests End-to-End&#10;&#10;```bash&#10;# Ejecutar suite completa de tests (27 tests)&#10;./test-e2e-completo.sh&#10;&#10;# Resultado esperado:&#10;# Tests ejecutados:     27&#10;# Tests exitosos:       27 ✅&#10;# Tests fallidos:       0 ❌&#10;# Tasa de éxito:        100.00%&#10;```&#10;&#10;##  Documentación&#10;&#10;### Documentos Principales&#10;&#10;| Documento | Descripción |&#10;|-----------|-------------|&#10;| [GUIA_INICIO_RAPIDO.md](GUIA_INICIO_RAPIDO.md) | Tutorial paso a paso para nuevos desarrolladores |&#10;| [GUIA_SCRIPTS.md](GUIA_SCRIPTS.md) | Documentación de todos los scripts disponibles |&#10;| [API_GATEWAY_COMPLETADO.md](API_GATEWAY_COMPLETADO.md) | Detalles del API Gateway y routing |&#10;| [DIAGNOSTICO_Y_SOLUCION_FINAL.md](DIAGNOSTICO_Y_SOLUCION_FINAL.md) | Resolución de problemas comunes |&#10;| [SISTEMA_100_FUNCIONAL.md](SISTEMA_100_FUNCIONAL.md) | Estado actual y funcionalidades |&#10;| [WARNINGS_RESUELTOS_FINAL.md](WARNINGS_RESUELTOS_FINAL.md) | Problemas resueltos y lecciones aprendidas |&#10;| [HOJA_DE_RUTA.md](HOJA_DE_RUTA.md) | Roadmap del proyecto |&#10;| [SIGUIENTES_PASOS.md](SIGUIENTES_PASOS.md) | Próximas funcionalidades |&#10;&#10;### Documentación Técnica&#10;&#10;- **Arquitectura**: `analisis-estrategico-balconazo.md`&#10;- **API Gateway**: `API_GATEWAY_COMPLETADO.md`&#10;- **Análisis de Warnings**: `ANALISIS_WARNINGS.md`&#10;- **Documentación Interna**: `documentacion.md`&#10;&#10;##  Estado del Proyecto&#10;&#10;### Estado Actual: ✅ Producción Ready&#10;&#10;```&#10;├── Microservicios        ✅ 5/5 operativos&#10;├── API Gateway           ✅ Funcionando&#10;├── Service Discovery     ✅ Eureka activo&#10;├── Eventos Kafka         ✅ Propagación correcta&#10;├── Seguridad JWT         ✅ Implementada&#10;├── Tests E2E             ✅ 27/27 pasando&#10;├── Búsqueda Geoespacial  ✅ PostGIS operativo&#10;└── Documentación         ✅ Completa&#10;```&#10;&#10;### Métricas&#10;&#10;- **Cobertura de Tests**: 100% (27/27)&#10;- **Uptime Services**: 100%&#10;- **Response Time**: &lt; 200ms (promedio)&#10;- **Event Latency**: &lt; 2s (Kafka)&#10;&#10;### Tests Validados&#10;&#10;- ✅ Health checks de todos los servicios&#10;- ✅ Registro en Eureka&#10;- ✅ Autenticación JWT&#10;- ✅ CRUD de espacios&#10;- ✅ Sistema de reservas&#10;- ✅ Búsqueda geoespacial&#10;- ✅ Propagación de eventos Kafka&#10;- ✅ Seguridad (401 en rutas protegidas)&#10;- ✅ Métricas y Actuator&#10;&#10;##  Scripts Disponibles&#10;&#10;### Gestión del Sistema&#10;&#10;```bash&#10;./start-system-improved.sh   # Inicia todo el sistema&#10;./stop-all.sh                # Detiene todos los servicios&#10;./recompile-all.sh           # Recompila todos los microservicios&#10;./verify-system.sh           # Verifica estado del sistema&#10;./check-system.sh            # Health checks rápidos&#10;```&#10;&#10;### Servicios Individuales&#10;&#10;```bash&#10;./start-eureka.sh            # Inicia Eureka Server&#10;./start-gateway.sh           # Inicia API Gateway&#10;./start-infrastructure.sh    # Inicia DBs, Kafka, Redis&#10;./start-catalog.sh           # Inicia Catalog Service&#10;./start-booking.sh           # Inicia Booking Service&#10;./start-search.sh            # Inicia Search Service&#10;```&#10;&#10;### Testing&#10;&#10;```bash&#10;./test-e2e-completo.sh       # Suite completa E2E (27 tests)&#10;./test-redis.sh              # Tests de Redis&#10;```&#10;&#10;##  Troubleshooting&#10;&#10;### Problema: Servicios no inician&#10;&#10;```bash&#10;# 1. Verificar infraestructura&#10;./check-system.sh&#10;&#10;# 2. Ver logs&#10;tail -f /tmp/catalog-service.log&#10;tail -f /tmp/booking-service.log&#10;&#10;# 3. Reiniciar servicios&#10;./stop-all.sh&#10;./start-system-improved.sh&#10;```&#10;&#10;### Problema: Tests fallan&#10;&#10;```bash&#10;# Verificar que todos los servicios estén UP&#10;curl http://localhost:8080/actuator/health&#10;curl http://localhost:8084/actuator/health&#10;curl http://localhost:8085/actuator/health&#10;&#10;# Verificar Eureka&#10;curl http://localhost:8761/eureka/apps&#10;```&#10;&#10;### Problema: Kafka no propaga eventos&#10;&#10;```bash&#10;# Verificar topic&#10;docker exec -it kafka kafka-topics --list --bootstrap-server localhost:9092&#10;&#10;# Ver logs de Catalog&#10;grep -i &quot;kafka\|event&quot; /tmp/catalog-service.log&#10;&#10;# Ver logs de Search&#10;grep -i &quot;received.*event&quot; /tmp/search-service.log&#10;```&#10;&#10;##  Próximas Funcionalidades&#10;&#10;### Corto Plazo (Sprint 1-2)&#10;- [ ] Frontend Angular 20&#10;- [ ] Integración con Stripe para pagos&#10;- [ ] Sistema de reviews y ratings&#10;- [ ] Notificaciones push&#10;&#10;### Medio Plazo (Sprint 3-4)&#10;- [ ] Chat en tiempo real (WebSocket)&#10;- [ ] Panel de administración&#10;- [ ] Analytics y reportes&#10;- [ ] App móvil (React Native)&#10;&#10;### Largo Plazo (Sprint 5+)&#10;- [ ] Machine Learning para recomendaciones&#10;- [ ] Sistema de fidelización&#10;- [ ] Integración con calendarios externos&#10;- [ ] Multilenguaje (i18n)&#10;&#10;Ver [HOJA_DE_RUTA.md](HOJA_DE_RUTA.md) para más detalles.&#10;&#10;##  Contribuir&#10;&#10;### Proceso&#10;&#10;1. Fork el proyecto&#10;2. Crea tu feature branch (`git checkout -b feature/AmazingFeature`)&#10;3. Commit tus cambios (`git commit -m 'Add some AmazingFeature'`)&#10;4. Push al branch (`git push origin feature/AmazingFeature`)&#10;5. Abre un Pull Request&#10;&#10;### Estándares&#10;&#10;- Seguir convenciones de código Java (Google Style Guide)&#10;- Tests unitarios obligatorios (&gt;80% cobertura)&#10;- Documentar endpoints con OpenAPI&#10;- Actualizar CHANGELOG.md&#10;&#10;##  Licencia&#10;&#10;Este proyecto está bajo la Licencia MIT - ver el archivo [LICENSE](LICENSE) para detalles.&#10;&#10;##  Equipo&#10;&#10;- **Backend Lead** - Arquitectura de microservicios&#10;- **DevOps** - Infraestructura y CI/CD&#10;- **QA** - Testing y calidad&#10;&#10;##  Contacto&#10;&#10;- **Email**: contacto@balconazo.com&#10;- **Website**: https://balconazo.com&#10;- **Issues**: https://github.com/tu-usuario/BalconazoApp/issues&#10;&#10;---&#10;&#10;**Estado del Sistema**:  Producción Ready  &#10;**Última Actualización**: 29 de Octubre de 2025  &#10;**Versión**: 1.0.0&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/start-system-improved.sh">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/start-system-improved.sh" />
              <option name="updatedContent" value="#!/usr/bin/env bash&#10;#&#10;# start-system-improved.sh - Inicia el sistema completo de BalconazoApp&#10;# &#10;# Descripción:&#10;#   Script maestro que inicia todos los microservicios en el orden correcto:&#10;#   1. Infraestructura (DBs, Kafka, Redis)&#10;#   2. Eureka Server (Service Discovery)&#10;#   3. API Gateway&#10;#   4. Microservicios (Auth, Catalog, Booking, Search)&#10;#&#10;# Uso:&#10;#   ./start-system-improved.sh [opciones]&#10;#&#10;# Opciones:&#10;#   -h, --help     Muestra esta ayuda&#10;#   -v, --verbose  Modo verbose&#10;#   -s, --skip-infra  Salta la inicialización de infraestructura&#10;#&#10;# Ejemplo:&#10;#   ./start-system-improved.sh&#10;#   ./start-system-improved.sh --skip-infra&#10;#&#10;&#10;set -euo pipefail&#10;&#10;# Colores&#10;readonly RED='\033[0;31m'&#10;readonly GREEN='\033[0;32m'&#10;readonly YELLOW='\033[1;33m'&#10;readonly BLUE='\033[0;34m'&#10;readonly NC='\033[0m' # No Color&#10;&#10;# Configuración&#10;readonly SCRIPT_DIR=&quot;$(cd &quot;$(dirname &quot;${BASH_SOURCE[0]}&quot;)&quot; &amp;&amp; pwd)&quot;&#10;readonly LOG_DIR=&quot;/tmp&quot;&#10;readonly WAIT_TIME=20&#10;SKIP_INFRA=false&#10;VERBOSE=false&#10;&#10;# Funciones auxiliares&#10;log_info() {&#10;    echo -e &quot;${BLUE}ℹ️  $*${NC}&quot;&#10;}&#10;&#10;log_success() {&#10;    echo -e &quot;${GREEN}✅ $*${NC}&quot;&#10;}&#10;&#10;log_warning() {&#10;    echo -e &quot;${YELLOW}⚠️  $*${NC}&quot;&#10;}&#10;&#10;log_error() {&#10;    echo -e &quot;${RED}❌ $*${NC}&quot; &gt;&amp;2&#10;}&#10;&#10;show_help() {&#10;    sed -n '/^#/,/^$/s/^# \?//p' &quot;$0&quot;&#10;    exit 0&#10;}&#10;&#10;check_port() {&#10;    local port=$1&#10;    nc -z localhost &quot;$port&quot; 2&gt;/dev/null&#10;}&#10;&#10;wait_for_service() {&#10;    local name=$1&#10;    local port=$2&#10;    local max_attempts=30&#10;    local attempt=0&#10;&#10;    log_info &quot;Esperando a que $name esté disponible en puerto $port...&quot;&#10;&#10;    while ! check_port &quot;$port&quot;; do&#10;        attempt=$((attempt + 1))&#10;        if [ $attempt -ge $max_attempts ]; then&#10;            log_error &quot;$name no respondió después de $max_attempts intentos&quot;&#10;            return 1&#10;        fi&#10;        sleep 2&#10;        echo -n &quot;.&quot;&#10;    done&#10;    echo &quot;&quot;&#10;    log_success &quot;$name está disponible&quot;&#10;}&#10;&#10;check_service_health() {&#10;    local name=$1&#10;    local port=$2&#10;    local response&#10;&#10;    response=$(curl -s &quot;http://localhost:$port/actuator/health&quot; 2&gt;/dev/null || echo &quot;&quot;)&#10;    if echo &quot;$response&quot; | jq -e '.status == &quot;UP&quot;' &gt;/dev/null 2&gt;&amp;1; then&#10;        log_success &quot;$name: UP&quot;&#10;        return 0&#10;    else&#10;        log_warning &quot;$name: DOWN o sin respuesta&quot;&#10;        return 1&#10;    fi&#10;}&#10;&#10;# Parsear argumentos&#10;while [[ $# -gt 0 ]]; do&#10;    case $1 in&#10;        -h|--help)&#10;            show_help&#10;            ;;&#10;        -v|--verbose)&#10;            VERBOSE=true&#10;            shift&#10;            ;;&#10;        -s|--skip-infra)&#10;            SKIP_INFRA=true&#10;            shift&#10;            ;;&#10;        *)&#10;            log_error &quot;Opción desconocida: $1&quot;&#10;            show_help&#10;            ;;&#10;    esac&#10;done&#10;&#10;# Verificar prerequisitos&#10;if ! command -v java &amp;&gt; /dev/null; then&#10;    log_error &quot;Java no está instalado. Por favor instala Java 21+&quot;&#10;    exit 1&#10;fi&#10;&#10;if ! command -v mvn &amp;&gt; /dev/null; then&#10;    log_error &quot;Maven no está instalado&quot;&#10;    exit 1&#10;fi&#10;&#10;if ! command -v docker &amp;&gt; /dev/null; then&#10;    log_error &quot;Docker no está instalado&quot;&#10;    exit 1&#10;fi&#10;&#10;# Banner&#10;echo &quot;&quot;&#10;echo -e &quot;${BLUE}╔════════════════════════════════════════════╗${NC}&quot;&#10;echo -e &quot;${BLUE}║      INICIANDO SISTEMA BALCONAZO        ║${NC}&quot;&#10;echo -e &quot;${BLUE}╔════════════════════════════════════════════╗${NC}&quot;&#10;echo &quot;&quot;&#10;&#10;# 1. Infraestructura&#10;if [ &quot;$SKIP_INFRA&quot; = false ]; then&#10;    log_info &quot;PASO 1/5: Iniciando infraestructura (DBs, Kafka, Redis)...&quot;&#10;    if [ -f &quot;$SCRIPT_DIR/start-infrastructure.sh&quot; ]; then&#10;        bash &quot;$SCRIPT_DIR/start-infrastructure.sh&quot;&#10;    else&#10;        log_warning &quot;start-infrastructure.sh no encontrado, saltando...&quot;&#10;    fi&#10;    sleep 10&#10;else&#10;    log_info &quot;PASO 1/5: Saltando infraestructura (--skip-infra)&quot;&#10;fi&#10;&#10;# 2. Eureka Server&#10;log_info &quot;PASO 2/5: Iniciando Eureka Server...&quot;&#10;if [ -f &quot;$SCRIPT_DIR/start-eureka.sh&quot; ]; then&#10;    bash &quot;$SCRIPT_DIR/start-eureka.sh&quot;&#10;    wait_for_service &quot;Eureka Server&quot; 8761&#10;else&#10;    log_error &quot;start-eureka.sh no encontrado&quot;&#10;    exit 1&#10;fi&#10;&#10;# 3. API Gateway&#10;log_info &quot;PASO 3/5: Iniciando API Gateway...&quot;&#10;if [ -f &quot;$SCRIPT_DIR/start-gateway.sh&quot; ]; then&#10;    bash &quot;$SCRIPT_DIR/start-gateway.sh&quot;&#10;    wait_for_service &quot;API Gateway&quot; 8080&#10;else&#10;    log_warning &quot;start-gateway.sh no encontrado, saltando...&quot;&#10;fi&#10;&#10;# 4. Auth Service&#10;log_info &quot;PASO 4/5: Iniciando Auth Service...&quot;&#10;cd &quot;$SCRIPT_DIR/auth-service&quot; || exit 1&#10;nohup java -jar target/auth-service-1.0.0.jar &gt; &quot;$LOG_DIR/auth-service.log&quot; 2&gt;&amp;1 &amp;&#10;echo $! &gt; &quot;$LOG_DIR/auth-pid.txt&quot;&#10;wait_for_service &quot;Auth Service&quot; 8084&#10;&#10;# 5. Catalog Service&#10;log_info &quot;Iniciando Catalog Service...&quot;&#10;cd &quot;$SCRIPT_DIR/catalog_microservice&quot; || exit 1&#10;nohup java -jar target/catalog_microservice-0.0.1-SNAPSHOT.jar &gt; &quot;$LOG_DIR/catalog-service.log&quot; 2&gt;&amp;1 &amp;&#10;echo $! &gt; &quot;$LOG_DIR/catalog-pid.txt&quot;&#10;wait_for_service &quot;Catalog Service&quot; 8085&#10;&#10;# 6. Booking Service&#10;log_info &quot;Iniciando Booking Service...&quot;&#10;cd &quot;$SCRIPT_DIR/booking_microservice&quot; || exit 1&#10;nohup java -jar target/booking_microservice-0.0.1-SNAPSHOT.jar &gt; &quot;$LOG_DIR/booking-service.log&quot; 2&gt;&amp;1 &amp;&#10;echo $! &gt; &quot;$LOG_DIR/booking-pid.txt&quot;&#10;wait_for_service &quot;Booking Service&quot; 8082&#10;&#10;# 7. Search Service&#10;log_info &quot;Iniciando Search Service...&quot;&#10;cd &quot;$SCRIPT_DIR/search_microservice&quot; || exit 1&#10;nohup java -jar target/search_microservice-0.0.1-SNAPSHOT.jar &gt; &quot;$LOG_DIR/search-service.log&quot; 2&gt;&amp;1 &amp;&#10;echo $! &gt; &quot;$LOG_DIR/search-pid.txt&quot;&#10;wait_for_service &quot;Search Service&quot; 8083&#10;&#10;# Esperar un poco para que se registren en Eureka&#10;log_info &quot;PASO 5/5: Esperando registro en Eureka...&quot;&#10;sleep 15&#10;&#10;# Verificación final&#10;echo &quot;&quot;&#10;log_info &quot;Verificando estado de los servicios...&quot;&#10;echo &quot;&quot;&#10;&#10;check_service_health &quot;API Gateway&quot; 8080&#10;check_service_health &quot;Eureka Server&quot; 8761&#10;check_service_health &quot;Auth Service&quot; 8084&#10;check_service_health &quot;Catalog Service&quot; 8085&#10;check_service_health &quot;Booking Service&quot; 8082&#10;check_service_health &quot;Search Service&quot; 8083&#10;&#10;echo &quot;&quot;&#10;echo -e &quot;${GREEN}╔════════════════════════════════════════════╗${NC}&quot;&#10;echo -e &quot;${GREEN}║   ✅ SISTEMA INICIADO CORRECTAMENTE       ║${NC}&quot;&#10;echo -e &quot;${GREEN}╚════════════════════════════════════════════╝${NC}&quot;&#10;echo &quot;&quot;&#10;&#10;log_info &quot;URLs útiles:&quot;&#10;echo &quot;  • API Gateway:     http://localhost:8080&quot;&#10;echo &quot;  • Eureka Dashboard: http://localhost:8761&quot;&#10;echo &quot;  • Auth Service:     http://localhost:8084&quot;&#10;echo &quot;  • Catalog Service:  http://localhost:8085&quot;&#10;echo &quot;  • Booking Service:  http://localhost:8082&quot;&#10;echo &quot;  • Search Service:   http://localhost:8083&quot;&#10;echo &quot;&quot;&#10;&#10;log_info &quot;Logs disponibles en: $LOG_DIR/*.log&quot;&#10;echo &quot;&quot;&#10;&#10;log_info &quot;Para ejecutar tests: ./test-e2e-completo.sh&quot;&#10;log_info &quot;Para detener el sistema: ./stop-all.sh&quot;&#10;echo &quot;&quot;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>