<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/SOLUCION_DIALOGO_LOGIN.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/SOLUCION_DIALOGO_LOGIN.md" />
              <option name="updatedContent" value="#  SOLUCIÓN: Diálogo de Autenticación HTTP Basic&#10;&#10;**Problema:** Al acceder a `http://localhost:8080/` aparece un diálogo de &quot;Iniciar sesión&quot; pidiendo usuario y contraseña.&#10;&#10;**Causa:** Spring Security por defecto estaba requiriendo autenticación para TODAS las rutas, incluyendo la raíz `/`.&#10;&#10;---&#10;&#10;## ✅ CORRECCIONES APLICADAS&#10;&#10;### 1. SecurityConfig.java - Permitir acceso a raíz&#10;&#10;**Cambio realizado:**&#10;```java&#10;.authorizeExchange(exchanges -&gt; exchanges&#10;    // Rutas públicas (sin autenticación)&#10;    .pathMatchers(&quot;/&quot;).permitAll()           // ✅ NUEVO - Permitir raíz&#10;    .pathMatchers(&quot;/api/auth/**&quot;).permitAll()&#10;    .pathMatchers(&quot;/api/search/**&quot;).permitAll()&#10;    .pathMatchers(&quot;/actuator/**&quot;).permitAll()&#10;    .pathMatchers(&quot;/fallback/**&quot;).permitAll()&#10;    &#10;    // Rutas protegidas (requieren JWT)&#10;    .pathMatchers(&quot;/api/catalog/**&quot;).authenticated()&#10;    .pathMatchers(&quot;/api/booking/**&quot;).authenticated()&#10;    &#10;    // Cualquier otra ruta API requiere autenticación&#10;    .pathMatchers(&quot;/api/**&quot;).authenticated()&#10;    &#10;    // Otras rutas son públicas&#10;    .anyExchange().permitAll()              // ✅ CAMBIADO de .authenticated()&#10;)&#10;```&#10;&#10;### 2. WelcomeController.java - Endpoint de Bienvenida&#10;&#10;**Nuevo archivo creado:**&#10;```java&#10;@RestController&#10;public class WelcomeController {&#10;    &#10;    @GetMapping(&quot;/&quot;)&#10;    public ResponseEntity&lt;Map&lt;String, Object&gt;&gt; welcome() {&#10;        return ResponseEntity.ok(Map.of(&#10;            &quot;service&quot;, &quot;Balconazo API Gateway&quot;,&#10;            &quot;version&quot;, &quot;1.0.0&quot;,&#10;            &quot;status&quot;, &quot;UP&quot;,&#10;            &quot;endpoints&quot;, Map.of(&#10;                &quot;health&quot;, &quot;/actuator/health&quot;,&#10;                &quot;auth&quot;, &quot;POST /api/auth/login&quot;,&#10;                &quot;catalog&quot;, &quot;GET /api/catalog/spaces (requiere JWT)&quot;,&#10;                &quot;search&quot;, &quot;GET /api/search/spaces?lat=40&amp;lon=-3&amp;radius=10&quot;&#10;            )&#10;        ));&#10;    }&#10;}&#10;```&#10;&#10;---&#10;&#10;##  CÓMO REINICIAR EL API GATEWAY&#10;&#10;### Opción 1: Con script (recomendado)&#10;```bash&#10;# Detener gateway actual&#10;lsof -ti:8080 | xargs kill -9 2&gt;/dev/null&#10;&#10;# Iniciar con script&#10;cd /Users/angel/Desktop/BalconazoApp&#10;./start-gateway.sh&#10;```&#10;&#10;### Opción 2: Manual&#10;```bash&#10;# Detener gateway actual&#10;lsof -ti:8080 | xargs kill -9 2&gt;/dev/null&#10;&#10;# Compilar (si no está compilado)&#10;cd api-gateway&#10;mvn clean package -DskipTests&#10;&#10;# Iniciar&#10;java -jar target/api-gateway-1.0.0.jar&#10;```&#10;&#10;### Opción 3: Con Maven (para desarrollo)&#10;```bash&#10;cd /Users/angel/Desktop/BalconazoApp/api-gateway&#10;mvn spring-boot:run&#10;```&#10;&#10;---&#10;&#10;##  VERIFICAR QUE FUNCIONA&#10;&#10;### 1. Esperar 20-30 segundos después de iniciar&#10;&#10;### 2. Verificar health check&#10;```bash&#10;curl http://localhost:8080/actuator/health&#10;```&#10;&#10;**Respuesta esperada:**&#10;```json&#10;{&#10;  &quot;status&quot;: &quot;UP&quot;,&#10;  &quot;components&quot;: {&#10;    &quot;eureka&quot;: {&quot;status&quot;: &quot;UP&quot;},&#10;    &quot;redis&quot;: {&quot;status&quot;: &quot;UP&quot;}&#10;  }&#10;}&#10;```&#10;&#10;### 3. Acceder a la raíz (ya NO pedirá usuario/contraseña)&#10;```bash&#10;curl http://localhost:8080/&#10;```&#10;&#10;**Respuesta esperada:**&#10;```json&#10;{&#10;  &quot;service&quot;: &quot;Balconazo API Gateway&quot;,&#10;  &quot;version&quot;: &quot;1.0.0&quot;,&#10;  &quot;status&quot;: &quot;UP&quot;,&#10;  &quot;endpoints&quot;: { ... }&#10;}&#10;```&#10;&#10;### 4. Abrir en navegador&#10;```&#10;http://localhost:8080/&#10;```&#10;&#10;**Ahora debería mostrar JSON en lugar del diálogo de login.**&#10;&#10;---&#10;&#10;##  RUTAS DISPONIBLES&#10;&#10;### ✅ Públicas (sin autenticación)&#10;| Ruta | Método | Descripción |&#10;|------|--------|-------------|&#10;| `/` | GET | Página de bienvenida |&#10;| `/actuator/health` | GET | Health check |&#10;| `/api/auth/register` | POST | Registrar usuario |&#10;| `/api/auth/login` | POST | Iniciar sesión |&#10;| `/api/search/spaces` | GET | Buscar espacios |&#10;&#10;###  Protegidas (requieren JWT)&#10;| Ruta | Método | Descripción |&#10;|------|--------|-------------|&#10;| `/api/catalog/spaces` | GET | Listar espacios |&#10;| `/api/catalog/users` | GET | Listar usuarios |&#10;| `/api/booking/bookings` | GET | Listar reservas |&#10;| `/api/booking/reviews` | GET | Listar reviews |&#10;&#10;---&#10;&#10;##  EJEMPLO DE USO&#10;&#10;### 1. Acceder a la raíz (público)&#10;```bash&#10;curl http://localhost:8080/&#10;```&#10;&#10;### 2. Buscar espacios (público)&#10;```bash&#10;curl &quot;http://localhost:8080/api/search/spaces?lat=40.4168&amp;lon=-3.7038&amp;radius=10&quot;&#10;```&#10;&#10;### 3. Registrar usuario&#10;```bash&#10;curl -X POST http://localhost:8080/api/auth/register \&#10;  -H &quot;Content-Type: application/json&quot; \&#10;  -d '{&#10;    &quot;email&quot;: &quot;angel@balconazo.com&quot;,&#10;    &quot;password&quot;: &quot;miPassword123&quot;,&#10;    &quot;role&quot;: &quot;HOST&quot;&#10;  }'&#10;```&#10;&#10;### 4. Login y obtener JWT&#10;```bash&#10;TOKEN=$(curl -s -X POST http://localhost:8080/api/auth/login \&#10;  -H &quot;Content-Type: application/json&quot; \&#10;  -d '{&#10;    &quot;email&quot;: &quot;angel@balconazo.com&quot;,&#10;    &quot;password&quot;: &quot;miPassword123&quot;&#10;  }' | jq -r '.token')&#10;&#10;echo &quot;Token: $TOKEN&quot;&#10;```&#10;&#10;### 5. Usar JWT en rutas protegidas&#10;```bash&#10;curl -H &quot;Authorization: Bearer $TOKEN&quot; \&#10;  http://localhost:8080/api/catalog/spaces&#10;```&#10;&#10;---&#10;&#10;##  TROUBLESHOOTING&#10;&#10;### Si sigue apareciendo el diálogo de login:&#10;&#10;1. **Verificar que el gateway se reinició correctamente:**&#10;   ```bash&#10;   lsof -i:8080&#10;   # Debe mostrar el proceso de java con api-gateway&#10;   ```&#10;&#10;2. **Verificar logs:**&#10;   ```bash&#10;   tail -f logs/api-gateway.log&#10;   # o&#10;   tail -f /tmp/api-gateway.log&#10;   ```&#10;&#10;3. **Limpiar caché del navegador:**&#10;   - Chrome/Firefox: Ctrl+Shift+Del → Borrar caché&#10;   - O usar modo incógnito&#10;&#10;4. **Verificar que el JAR esté actualizado:**&#10;   ```bash&#10;   ls -lh api-gateway/target/api-gateway-1.0.0.jar&#10;   # Debe tener fecha/hora reciente (después de la compilación)&#10;   ```&#10;&#10;---&#10;&#10;## ✅ SOLUCIÓN APLICADA&#10;&#10;✅ SecurityConfig modificado para permitir acceso público a `/`  &#10;✅ WelcomeController creado con endpoint de bienvenida  &#10;✅ Compilación exitosa (BUILD SUCCESS)  &#10;✅ Listo para reiniciar el gateway  &#10;&#10;**Después de reiniciar, ya NO aparecerá el diálogo de autenticación HTTP Basic.**&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>